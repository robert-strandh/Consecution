(defun tt1 (list length)
  (declare (type fixnum length)
	   (optimize (speed 3) (compilation-speed 0) (safety 0)))
  (let ((count 0))
    (declare (type fixnum count))
    (flet ((process (elem)
	     (when (eql elem 0)
	       (incf count))))
      (labels ((traverse (rest length)
		 (declare (type fixnum length))
		 (when (> length 0)
		   (when (consp rest)
		     (traverse (cdr rest) (1- length))
		     (process (car rest))))))
	(traverse list length)))))

(defun count-from-end-with-length (list length)
  (declare (type fixnum length)
	   (optimize (speed 3) (compilation-speed 0)))
  (let ((count 0))
    (declare (type fixnum count))
    (flet ((process (elem)
	     (when (eql elem 0)
	       (incf count))))
      (labels ((recursive-traverse (rest length)
		 (declare (type fixnum length))
		 (when (> length 0)
		   (when (consp rest)
		     (traverse (cdr rest) (1- length))
		     (process (car rest)))))
	       (traverse (rest length)
		 (declare (type fixnum length))
		 (if (< length 100)
		     (recursive-traverse rest length)
		     (let* ((p8 (ash length -1))
			    (p4 (ash p8 -1))
			    (p2 (ash p4 -1))
			    (p1 (ash p2 -1))
			    (p3 (+ p2 (ash (- p4 p2) -1)))
			    (p6 (+ p4 (ash (- p8 p4) -1)))
			    (p5 (+ p4 (ash (- p6 p4) -1)))
			    (p7 (+ p6 (ash (- p8 p6) -1)))
			    (p12 (+ p8 (ash (- length p8) -1)))
			    (p10 (+ p8 (ash (- p12 p8) -1)))
			    (p9 (+ p8 (ash (- p10 p8) -1)))
			    (p11 (+ p10 (ash (- p12 p10) -1)))
			    (p14 (+ p12 (ash (- length p12) -1)))
			    (p13 (+ p12 (ash (- p14 p12) -1)))
			    (p15 (+ p14 (ash (- length p14) -1)))
			    (r1 (nthcdr p1 rest))
			    (r2 (nthcdr (- p2 p1) r1))
			    (r3 (nthcdr (- p3 p2) r2))
			    (r4 (nthcdr (- p4 p3) r3))
			    (r5 (nthcdr (- p5 p4) r4))
			    (r6 (nthcdr (- p6 p5) r5))
			    (r7 (nthcdr (- p7 p6) r6))
			    (r8 (nthcdr (- p8 p7) r7))
			    (r9 (nthcdr (- p9 p8) r8))
			    (r10 (nthcdr (- p10 p9) r9))
			    (r11 (nthcdr (- p11 p10) r10))
			    (r12 (nthcdr (- p12 p11) r11))
			    (r13 (nthcdr (- p13 p12) r12))
			    (r14 (nthcdr (- p14 p13) r13))
			    (r15 (nthcdr (- p15 p14) r14)))
		       (traverse r15 (- length p15))
		       (traverse r14 (- p15 p14))
		       (traverse r13 (- p14 p13))
		       (traverse r12 (- p13 p12))
		       (traverse r11 (- p12 p11))
		       (traverse r10 (- p11 p10))
		       (traverse r9 (- p10 p9))
		       (traverse r8 (- p9 p8))
		       (traverse r7 (- p8 p7))
		       (traverse r6 (- p7 p6))
		       (traverse r5 (- p6 p5))
		       (traverse r4 (- p5 p4))
		       (traverse r3 (- p4 p3))
		       (traverse r2 (- p3 p2))
		       (traverse r1 (- p2 p1))
		       (traverse rest p1)))))
	(traverse list length)))))

(defun count-from-end (list)
  (count-from-end-with-length list (length list)))

(defun find-from-end-with-length (element list length)
  (declare (type fixnum length)
	   (optimize (speed 3) (compilation-speed 0)))
  (flet ((process (elem)
	   (when (eq elem element)
	     (return-from find-from-end-with-length elem))))
    (labels ((recursive-traverse (rest length)
	       (declare (type fixnum length))
	       (when (> length 0)
		 (when (consp rest)
		   (traverse (cdr rest) (1- length))
		   (process (car rest)))))
	     (traverse (rest length)
	       (declare (type fixnum length))
	       (if (< length 100)
		   (recursive-traverse rest length)
		   (let* ((p8 (ash length -1))
			  (p4 (ash p8 -1))
			  (p2 (ash p4 -1))
			  (p1 (ash p2 -1))
			  (p3 (+ p2 (ash (- p4 p2) -1)))
			  (p6 (+ p4 (ash (- p8 p4) -1)))
			  (p5 (+ p4 (ash (- p6 p4) -1)))
			  (p7 (+ p6 (ash (- p8 p6) -1)))
			  (p12 (+ p8 (ash (- length p8) -1)))
			  (p10 (+ p8 (ash (- p12 p8) -1)))
			  (p9 (+ p8 (ash (- p10 p8) -1)))
			  (p11 (+ p10 (ash (- p12 p10) -1)))
			  (p14 (+ p12 (ash (- length p12) -1)))
			  (p13 (+ p12 (ash (- p14 p12) -1)))
			  (p15 (+ p14 (ash (- length p14) -1)))
			  (r1 (nthcdr p1 rest))
			  (r2 (nthcdr (- p2 p1) r1))
			  (r3 (nthcdr (- p3 p2) r2))
			  (r4 (nthcdr (- p4 p3) r3))
			  (r5 (nthcdr (- p5 p4) r4))
			  (r6 (nthcdr (- p6 p5) r5))
			  (r7 (nthcdr (- p7 p6) r6))
			  (r8 (nthcdr (- p8 p7) r7))
			  (r9 (nthcdr (- p9 p8) r8))
			  (r10 (nthcdr (- p10 p9) r9))
			  (r11 (nthcdr (- p11 p10) r10))
			  (r12 (nthcdr (- p12 p11) r11))
			  (r13 (nthcdr (- p13 p12) r12))
			  (r14 (nthcdr (- p14 p13) r13))
			  (r15 (nthcdr (- p15 p14) r14)))
		     (traverse r15 (- length p15))
		     (traverse r14 (- p15 p14))
		     (traverse r13 (- p14 p13))
		     (traverse r12 (- p13 p12))
		     (traverse r11 (- p12 p11))
		     (traverse r10 (- p11 p10))
		     (traverse r9 (- p10 p9))
		     (traverse r8 (- p9 p8))
		     (traverse r7 (- p8 p7))
		     (traverse r6 (- p7 p6))
		     (traverse r5 (- p6 p5))
		     (traverse r4 (- p5 p4))
		     (traverse r3 (- p4 p3))
		     (traverse r2 (- p3 p2))
		     (traverse r1 (- p2 p1))
		     (traverse rest p1)))))
      (traverse list length))))

(defun find-from-end (element list)
  (find-from-end-with-length element list (length list)))

;; (defun gen (n prev)
;;   (if (zerop n)
;;       nil
;;       (let ((this (make-symbol (format nil "V~a" n))))
;; 	`(when (> length 0)
;; 	   (decf length)
;; 	   (let ((,this (cdr ,prev)))
;; 	     ,(gen (1- n) this)
;; 	     (process (car ,this)))))))

;; (defun tt2 (list length)
;;   (declare (type fixnum length)
;; 	   (optimize (speed 3) (compilation-speed 0)))
;;   (let ((count 0))
;;     (declare (type fixnum count))
;;     (flet ((process (elem)
;; 	     (when (eql elem 0)
;; 	       (incf count))))
;;       #.(gen 99 'list)
;;       (process (car list)))))
